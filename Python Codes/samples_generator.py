# -*- coding: utf-8 -*-
"""Samples Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ha_XKT03y7NP05XYzhldhkQljQV6ypd
"""

import random
import pandas as pd

# Define the ranges for each variable
variables = {
    "Renewable energy share (%)": [(0, 20), (20, 40), (40, 60)],
    "Energy savings (kWh)": [(0, 30), (30, 60), (60, 100)],
    "Air Quality Index": [(100, 200), (50, 100), (0, 50)],
    "CO2 emissions (tons)": [(100, 500), (50, 200), (0, 50)],
    "Groundwater levels (metres)": [(5, 10), (10, 20), (20, 50)],
    "Water quality index (WQI)": [(50, 70), (70, 85), (85, 100)],
    "Water consumption (litres per capita)": [(20, 50), (50, 100), (100, 200)],
    "Rainwater harvesting capacity (litres)": [(0, 1000), (1000, 5000), (5000, 10000)],
    "Green space per capita (m²)": [(0, 10), (10, 20), (20, 50)],
    "Building density (buildings/km²)": [(100, 200), (200, 400), (400, 800)],
    "Environmental policy stringency": [(10, 30), (30, 60), (60, 100)],
    "Climate conditions index": ["Low", "Mid", "High"],
    "Climate change mitigation effectiveness index": ["Low", "Mid", "High"],
    "Flood control infrastructure investments (USD)": [(0, 1e6), (1e6, 1e7), (1e7, 1e8)],
    "Heatwave management implementations": ["Low", "Mid", "High"],
    "Urban biodiversity index": ["Low", "Mid", "High"],
    "Economic value of ecosystem services (USD)": [(0, 1e6), (1e6, 1e7), (1e7, 1e8)],
    "Urbanisation rate (%)": [(10, 20), (20, 40), (40, 60)],
    "Transportation mode share (%)": [(0, 10), (10, 30), (30, 50)],
    "Geographical location identifier": ["Various"] * 3,
    "Technological advancement indicator": ["Low", "Mid", "High"],
    "Regulatory environment score": ["Low", "Mid", "High"],
    "Smart grid implementation rate (%)": [(0, 10), (10, 30), (30, 50)],
    "Renewable energy technology adoption rate (%)": [(0, 10), (10, 30), (30, 50)],
    "Blockchain utilisation for energy trading": ["Low", "Mid", "High"],
    "Disease prevalence (cases per 1000)": [(100, 200), (50, 100), (10, 50)],
    "Healthcare access index": [(20, 40), (40, 60), (60, 80)],
    "Vaccination coverage (%)": [(50, 70), (70, 85), (85, 100)],
    "Malnutrition rate (%)": [(20, 30), (10, 20), (0, 10)],
    "Education and awareness score": ["Low", "Mid", "High"],
    "Proximity to emergency health services": ["Low", "Mid", "High"],
    "Coverage of air quality monitoring networks": ["Low", "Mid", "High"],
    "GDP per capita (USD)": [(1000, 3000), (3000, 10000), (10000, 50000)],
    "Poverty rate (%)": [(20, 50), (10, 20), (0, 10)],
    "Gini coefficient": [(0.4, 0.6), (0.3, 0.4), (0.2, 0.3)],
    "Unemployment rate (%)": [(10, 20), (5, 10), (0, 5)],
    "Literacy rate (%)": [(50, 70), (70, 90), (90, 100)],
    "Female labour force participation (%)": [(10, 30), (30, 50), (50, 70)],
    "Funding availability (USD)": [(0, 10e6), (10e6, 100e6), (100e6, 1e9)],
    "Income inequality metrics": ["High", "Mid", "Low"],
    "Urban-rural migration trends": ["High", "Mid", "Low"],
    "Political stability index": [(10, 30), (30, 60), (60, 100)],
    "Corruption perception index": [(30, 50), (50, 70), (70, 90)],
    "Public participation index": [(10, 30), (30, 60), (60, 100)],
    "Socioeconomic status indicator": ["Low", "Mid", "High"],
    "Cultural factors identifier": ["Various"] * 3,
    "Political stability index": ["Low", "Mid", "High"],
    "Community engagement score": ["Low", "Mid", "High"],
    "AI readiness index": [(10, 30), (30, 60), (60, 100)],
    "Machine learning adoption rate (%)": [(0, 10), (10, 30), (30, 50)],
    "Big data utilization rate (%)": [(0, 10), (10, 30), (30, 50)],
    "AI investment (USD)": [(0, 1e6), (1e6, 10e6), (10e6, 100e6)],
    "Renewable energy storage capacity (MWh)": [(0, 10), (10, 50), (50, 100)],
    "SDG achievement index": ["Various"] * 3,
    "Waste management efficiency rate (%)": [(0, 10), (10, 30), (30, 50)],
    "Implementation of water-saving technologies": ["Low", "Mid", "High"],
    "Public environmental awareness level": ["Low", "Mid", "High"],
    "Adoption rate of sustainable consumption habits": ["Low", "Mid", "High"]
}

# Generate samples
samples = []
for i in range(50):
    sample = {}
    for var, ranges in variables.items():
        if isinstance(ranges[0], tuple):
            group = random.choice(ranges)
            sample[var] = round(random.uniform(*group), 2)
        else:
            sample[var] = random.choice(ranges)
    samples.append(sample)

# Convert to DataFrame
df = pd.DataFrame(samples)

# Display the DataFrame
print(df)

df.to_csv('file_name.csv')

import numpy as np
import matplotlib.pyplot as plt

# Define parameters for the simulation
# Example parameters for baseline urban systems
baseline_parameters = {
    "population_growth_rate": [0.01, 0.03],  # Annual growth rate range
    "resource_allocation": [1000, 5000],  # Units allocated to resources
    "climate_impact_factor": [0.8, 1.2],  # Multiplier for climate variability
}

# Define the number of simulations
n_simulations = 10000

# Generate random samples for each parameter
population_growth_samples = np.random.uniform(
    baseline_parameters["population_growth_rate"][0],
    baseline_parameters["population_growth_rate"][1],
    n_simulations
)

resource_allocation_samples = np.random.uniform(
    baseline_parameters["resource_allocation"][0],
    baseline_parameters["resource_allocation"][1],
    n_simulations
)

climate_impact_samples = np.random.uniform(
    baseline_parameters["climate_impact_factor"][0],
    baseline_parameters["climate_impact_factor"][1],
    n_simulations
)

# Simulate a key performance indicator (KPI) based on these factors
# Example: Urban Resilience Score (simplistic formula for demonstration)
kpi_scores = (
    population_growth_samples * climate_impact_samples
) / resource_allocation_samples

# Analyze and visualize results
mean_kpi = np.mean(kpi_scores)
std_kpi = np.std(kpi_scores)

print("Monte Carlo Simulation Results:")
print(f"Mean KPI Score: {mean_kpi:.4f}")
print(f"Standard Deviation of KPI Score: {std_kpi:.4f}")

# Plot the distribution of KPI scores
plt.hist(kpi_scores, bins=50, color='blue', alpha=0.7, edgecolor='black')
plt.title("Distribution of Urban Resilience KPI Scores")
plt.xlabel("KPI Score")
plt.ylabel("Frequency")
plt.grid(axis='y', alpha=0.75)
plt.show()