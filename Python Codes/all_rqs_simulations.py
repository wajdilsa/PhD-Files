# -*- coding: utf-8 -*-
"""All RQs Simulations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pDX9sJyu2LRpLrxHGUh39RxMrklSB1Ra
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

###############################################################################
# 1. NORMAL-SAMPLING HELPER
###############################################################################

def sample_param_normal(mean, std, lower, upper, max_attempts=1000):
    """
    Draws from a normal distribution (mean, std). Re-samples until the
    result is within [lower, upper], or until max_attempts is reached.
    """
    for _ in range(max_attempts):
        val = np.random.normal(mean, std)
        if lower <= val <= upper:
            return val
    # If no valid sample found within max_attempts, clamp the mean.
    return max(min(mean, upper), lower)

###############################################################################
# 2. FULL SCENARIO DATA DICTIONARY
#    (Constructed from your provided table, storing {mean, std, min, max})
###############################################################################

scenario_data = {
    "Baseline Scenario": {
        "RQ1": {
            "Total Population":        {"mean":152282.59,"std":6859.86,"min":136848.26,"max":175289.08},
            "Total Energy (units)":    {"mean":714041.12,"std":43810.10,"min":629251.38,"max":792643.74},
            "Emissions (units)":       {"mean":2.59,"std":0.18,"min":2.18,"max":3.03},
            "Normalized Score":        {"mean":0.33,"std":0.05,"min":0.24,"max":0.44},
            "Index Score":             {"mean":60.08,"std":1.73,"min":54.64,"max":63.39},
            "Share (%)":               {"mean":27.40,"std":3.23,"min":21.51,"max":33.00},
            "Resilience Index":        {"mean":0.31,"std":0.24,"min":0.00,"max":0.78},
            "Growth Rate (%)":         {"mean":0.01,"std":0.00,"min":0.00,"max":0.02},
            "Health Index":            {"mean":0.70,"std":0.09,"min":0.35,"max":0.94},
            "Cost-Benefit Ratio":      {"mean":-119.82,"std":15.91,"min":-154.72,"max":-83.88},
            "Renewable Energy Jobs":   {"mean":56.32,"std":6.75,"min":44.01,"max":67.95},
            "Infrastructure Jobs":     {"mean":31.05,"std":24.33,"min":0.00,"max":79.62},
            "General Jobs":            {"mean":510.61,"std":4.73,"min":500.00,"max":524.68}
        },
        "RQ2": {
            "Grid Efficiency":         {"mean":0.43,"std":0.06,"min":0.31,"max":0.53},
            "Waste Optimization":      {"mean":0.40,"std":0.07,"min":0.24,"max":0.53},
            "Transit Usage":           {"mean":0.35,"std":0.09,"min":0.21,"max":0.50},
            "Water Scarcity":          {"mean":0.67,"std":0.11,"min":0.40,"max":0.92},
            "Waste Accumulation":      {"mean":0.48,"std":0.01,"min":0.47,"max":0.49},
            "Traffic Congestion":      {"mean":0.24,"std":0.06,"min":0.12,"max":0.40},
            "Governance Index":        {"mean":0.58,"std":0.10,"min":0.38,"max":0.81},
            "Policy Success":          {"mean":0.27,"std":0.07,"min":0.15,"max":0.41},
            "SDG Progress":            {"mean":0.09,"std":0.05,"min":-0.03,"max":0.19},
            "CO2 Reduction":           {"mean":0.50,"std":0.00,"min":0.50,"max":0.51},
            "Recycling Rate":          {"mean":0.17,"std":0.06,"min":0.07,"max":0.30},
            "Economic Benefit":        {"mean":8.92,"std":8.77,"min":-5.15,"max":24.23}
        },
        "RQ3": {
            "Data Integration":        {"mean":0.11,"std":0.15,"min":0.00,"max":0.63},
            "IoT Scalability":         {"mean":0.04,"std":0.06,"min":0.00,"max":0.20},
            "Data Accuracy":           {"mean":0.05,"std":0.09,"min":0.00,"max":0.29},
            "Decision Efficiency":     {"mean":0.24,"std":0.02,"min":0.21,"max":0.27},
            "Cost Benefit":            {"mean":-2108.42,"std":202.33,"min":-2473.06,"max":-1712.46}
        },
        "RQ4": {
            "Framework_Performance":   {"mean":0.13,"std":0.02,"min":0.10,"max":0.16},
            "Adaptability":            {"mean":21.25,"std":0.11,"min":21.01,"max":21.43},
            "Gov_Impact":             {"mean":44.43,"std":5.77,"min":34.98,"max":53.97},
            "Sustainability":          {"mean":30.60,"std":0.07,"min":30.48,"max":30.70},
            "Econ_Impact":            {"mean":0.00,"std":0.00,"min":0.00,"max":0.00},
            "Community_WellBeing":     {"mean":40.37,"std":0.07,"min":40.24,"max":40.48}
        }
    },

    "Rapid Urbanization Scenario": {
        "RQ1": {
            "Total Population":        {"mean":220378.64,"std":15880.68,"min":179829.39,"max":260093.13},
            "Total Energy (units)":    {"mean":628486.27,"std":84716.82,"min":496416.39,"max":790214.05},
            "Emissions (units)":       {"mean":1.75,"std":0.31,"min":1.11,"max":2.57},
            "Normalized Score":        {"mean":0.30,"std":0.05,"min":0.20,"max":0.42},
            "Index Score":             {"mean":59.46,"std":2.83,"min":48.39,"max":64.30},
            "Share (%)":               {"mean":44.27,"std":6.41,"min":33.08,"max":56.00},
            "Resilience Index":        {"mean":0.10,"std":0.18,"min":0.00,"max":0.78},
            "Growth Rate (%)":         {"mean":0.02,"std":0.01,"min":0.00,"max":0.03},
            "Health Index":            {"mean":0.69,"std":0.09,"min":0.42,"max":0.91},
            "Cost-Benefit Ratio":      {"mean":-103.22,"std":20.70,"min":-157.71,"max":-42.50},
            "Renewable Energy Jobs":   {"mean":137.28,"std":20.06,"min":102.25,"max":173.83},
            "Infrastructure Jobs":     {"mean":18.87,"std":35.31,"min":0.00,"max":156.90},
            "General Jobs":            {"mean":716.96,"std":7.04,"min":700.00,"max":731.88}
        }
    },

    "Severe Climate Shock Scenario": {
        "RQ1": {
            "Total Population":        {"mean":135331.76,"std":5281.58,"min":118665.21,"max":147708.30},
            "Total Energy (units)":    {"mean":628486.27,"std":47611.97,"min":628828.61,"max":792232.87},
            "Emissions (units)":       {"mean":2.58,"std":0.22,"min":2.13,"max":3.08},
            "Normalized Score":        {"mean":0.46,"std":0.09,"min":0.26,"max":0.79},
            "Index Score":             {"mean":50.35,"std":5.93,"min":32.31,"max":62.85},
            "Share (%)":               {"mean":26.98,"std":0.03,"min":21.51,"max":33.00},
            "Resilience Index":        {"mean":0.10,"std":0.09,"min":0.00,"max":0.75},
            "Growth Rate (%)":         {"mean":0.01,"std":0.01,"min":0.00,"max":0.03},
            "Health Index":            {"mean":0.66,"std":0.10,"min":0.39,"max":1.00},
            "Cost-Benefit Ratio":      {"mean":-188.71,"std":16.99,"min":-225.71,"max":-138.63},
            "Jobs":                    {"mean":69.31,"std":8.54,"min":55.02,"max":84.94}
        }
    },

    "High Governance Scenario": {
        "RQ2": {
            "Grid Efficiency":         {"mean":0.55,"std":0.06,"min":0.44,"max":0.65},
            "Waste Optimization":      {"mean":0.54,"std":0.07,"min":0.41,"max":0.69},
            "Transit Usage":           {"mean":0.45,"std":0.09,"min":0.31,"max":0.60},
            "Water Scarcity":          {"mean":0.43,"std":0.13,"min":0.18,"max":0.74},
            "Waste Accumulation":      {"mean":0.46,"std":0.01,"min":0.43,"max":0.48},
            "Traffic Congestion":      {"mean":0.18,"std":0.05,"min":0.10,"max":0.32},
            "Governance Index":        {"mean":0.94,"std":0.11,"min":0.64,"max":1.17},
            "Policy Success":          {"mean":0.55,"std":0.09,"min":0.35,"max":0.78},
            "SDG Progress":            {"mean":0.23,"std":0.05,"min":0.11,"max":0.34},
            "CO2 Reduction":           {"mean":0.51,"std":0.00,"min":0.50,"max":0.52},
            "Recycling Rate":          {"mean":0.39,"std":0.12,"min":0.17,"max":0.65},
            "Economic Benefit":        {"mean":17.97,"std":8.49,"min":3.28,"max":34.05}
        }
    },

    "Resource Scarcity Scenario": {
        "RQ2": {
            "Grid Efficiency":         {"mean":0.34,"std":0.06,"min":0.24,"max":0.44},
            "Waste Optimization":      {"mean":0.35,"std":0.06,"min":0.24,"max":0.46},
            "Transit Usage":           {"mean":0.29,"std":0.06,"min":0.21,"max":0.40},
            "Water Scarcity":          {"mean":1.05,"std":0.09,"min":0.86,"max":1.22},
            "Waste Accumulation":      {"mean":0.48,"std":0.01,"min":0.46,"max":0.49},
            "Traffic Congestion":      {"mean":0.32,"std":0.07,"min":0.19,"max":0.46},
            "Governance Index":        {"mean":0.53,"std":0.09,"min":0.33,"max":0.72},
            "Policy Success":          {"mean":0.20,"std":0.04,"min":0.11,"max":0.30},
            "SDG Progress":            {"mean":-0.08,"std":0.05,"min":-0.18,"max":0.04},
            "CO2 Reduction":           {"mean":0.51,"std":0.00,"min":0.50,"max":0.51},
            "Recycling Rate":          {"mean":0.13,"std":0.04,"min":0.06,"max":0.22},
            "Economic Benefit":        {"mean":2.98,"std":6.09,"min":-5.54,"max":14.63}
        }
    },

    "High Investment Scenario": {
        "RQ3": {
            "Data Integration":        {"mean":0.45,"std":0.32,"min":0.00,"max":1.00},
            "IoT Scalability":         {"mean":0.09,"std":0.08,"min":0.00,"max":0.21},
            "Data Accuracy":           {"mean":0.11,"std":0.12,"min":0.00,"max":0.30},
            "Decision Efficiency":     {"mean":0.25,"std":0.02,"min":0.21,"max":0.27},
            "Cost Benefit":            {"mean":-3978.04,"std":411.17,"min":-4795.96,"max":-3380.61}
        }
    },

    "Low Resource Scenario": {
        "RQ3": {
            "Data_Integration":        {"mean":0.02,"std":0.04,"min":0.00,"max":0.40},
            "IoT_Scalability":         {"mean":0.01,"std":0.03,"min":0.00,"max":0.20},
            "Data_Accuracy":           {"mean":0.01,"std":0.03,"min":0.00,"max":0.28},
            "Decision_Efficiency":     {"mean":0.22,"std":0.01,"min":0.21,"max":0.27},
            "Cost_Benefit":            {"mean":-1655.83,"std":129.06,"min":-1838.74,"max":-1259.02}
        }
    },

    "Optimized Resource Scenario": {
        "RQ3": {
            "Framework_Performance":   {"mean":0.17,"std":0.02,"min":0.13,"max":0.20},
            "Adaptability":            {"mean":22.05,"std":0.17,"min":21.72,"max":22.44},
            "Gov_Impact":             {"mean":57.59,"std":6.65,"min":46.95,"max":67.62},
            "Sustainability":          {"mean":30.73,"std":0.07,"min":30.61,"max":30.85},
            "Econ_Impact":            {"mean":2.31,"std":0.59,"min":0.95,"max":4.01},
            "Community_WellBeing":     {"mean":40.36,"std":0.07,"min":40.25,"max":40.48}
        },
        "RQ4": {
            "Framework_Performance":   {"mean":0.17,"std":0.02,"min":0.13,"max":0.20},
            "Adaptability":            {"mean":22.05,"std":0.17,"min":21.72,"max":22.44},
            "Gov_Impact":             {"mean":57.59,"std":6.65,"min":46.95,"max":67.62},
            "Sustainability":          {"mean":30.73,"std":0.07,"min":30.61,"max":30.85},
            "Econ_Impact":            {"mean":2.31,"std":0.59,"min":0.95,"max":4.01},
            "Community_WellBeing":     {"mean":40.36,"std":0.07,"min":40.25,"max":40.48}
        }
    },

    "Stress-Test Scenario": {
        "RQ3": {
            "Framework_Performance":   {"mean":0.13,"std":0.02,"min":0.10,"max":0.16},
            "Adaptability":            {"mean":21.23,"std":0.15,"min":20.94,"max":21.59},
            "Gov_Impact":             {"mean":46.48,"std":6.02,"min":33.13,"max":56.56},
            "Sustainability":          {"mean":30.48,"std":0.07,"min":30.36,"max":30.60},
            "Econ_Impact":            {"mean":0.43,"std":0.16,"min":0.18,"max":0.76},
            "Community_WellBeing":     {"mean":40.24,"std":0.07,"min":40.12,"max":40.36}
        },
        "RQ4": {
            "Framework_Performance":   {"mean":0.13,"std":0.02,"min":0.10,"max":0.16},
            "Adaptability":            {"mean":21.23,"std":0.15,"min":20.94,"max":21.59},
            "Gov_Impact":             {"mean":46.48,"std":6.02,"min":33.13,"max":56.56},
            "Sustainability":          {"mean":30.48,"std":0.07,"min":30.36,"max":30.60},
            "Econ_Impact":            {"mean":0.43,"std":0.16,"min":0.18,"max":0.76},
            "Community_WellBeing":     {"mean":40.24,"std":0.07,"min":40.12,"max":40.36}
        }
    },

    "Community Engagement Scenario": {
        "RQ4": {
            "Framework_Performance":   {"mean":0.17,"std":0.02,"min":0.13,"max":0.20},
            "Adaptability":            {"mean":21.59,"std":0.11,"min":21.36,"max":21.82},
            "Gov_Impact":             {"mean":61.82,"std":7.56,"min":50.19,"max":75.26},
            "Sustainability":          {"mean":30.61,"std":0.07,"min":30.48,"max":30.72},
            "Econ_Impact":            {"mean":0.94,"std":0.30,"min":0.40,"max":1.75},
            "Community_WellBeing":     {"mean":40.67,"std":0.10,"min":40.48,"max":40.84}
        }
    }
}

###############################################################################
# 3. RETRIEVING SCENARIO DATA & SAMPLING
###############################################################################

def get_scenario_stats(scenario_name):
    """
    Retrieves the dictionary of {RQ -> {Metric -> {mean, std, min, max}}}
    for the specified scenario.
    """
    if scenario_name not in scenario_data:
        raise ValueError(f"Scenario '{scenario_name}' not found in scenario_data.")
    return scenario_data[scenario_name]

def simulate_scenario_final_step(scenario_name="Baseline Scenario"):
    """
    Samples one 'final step' from the scenario's metrics using normal distributions.
    Returns a dict, e.g. {'RQ1_Total Population': value, 'RQ1_Emissions (units)': value, ...}.
    """
    scenario_dict = get_scenario_stats(scenario_name)
    results = {}

    for rq_key, metrics_dict in scenario_dict.items():
        for metric_name, stats in metrics_dict.items():
            m  = stats["mean"]
            sd = stats["std"]
            mn = stats["min"]
            mx = stats["max"]

            # Sample one value, clamped between min & max
            sampled_value = sample_param_normal(m, sd, mn, mx)

            # Create a unified key, e.g., "RQ1_Total Population"
            dict_key = f"{rq_key}_{metric_name}"
            results[dict_key] = sampled_value

    return results

###############################################################################
# 4. MONTE CARLO FUNCTION
###############################################################################

def run_monte_carlo_new(n_runs=50, scenario_name="Baseline Scenario"):
    """
    Repeats 'simulate_scenario_final_step' multiple times for the chosen scenario,
    returning a DataFrame of the results.
    """
    records = []
    for _ in range(n_runs):
        record = simulate_scenario_final_step(scenario_name)
        records.append(record)
    df = pd.DataFrame(records)
    return df

###############################################################################
# 5. EXAMPLE USAGE
#    (You can comment out the "if __name__ == '__main__':" block if using in a notebook.)
###############################################################################

if __name__ == "__main__":
    # Example: run 50 Monte Carlo samples for the "Baseline Scenario"
    df_baseline = run_monte_carlo_new(n_runs=50, scenario_name="Baseline Scenario")

    print("\n=== Baseline Scenario: Summary of Sampled Final Step ===")
    print(df_baseline.describe())

    # Calculate correlation among metrics
    corr_matrix = df_baseline.corr()
    print("\nCorrelation Matrix (Baseline Scenario):")
    print(corr_matrix)

    # Visualization settings
    sns.set_theme(style="whitegrid")
    sns.set_palette(sns.color_palette("husl", 9))

    # Example: plot histograms for a couple of metrics
    fig, axes = plt.subplots(1, 2, figsize=(10,4))

    # Ensure these metric keys match what's in your DataFrame:
    sns.histplot(df_baseline["RQ1_Total Population"], ax=axes[0], kde=True)
    axes[0].set_title("Baseline: Total Population")

    # Another example metric:
    sns.histplot(df_baseline["RQ1_Emissions (units)"], ax=axes[1], kde=True)
    axes[1].set_title("Baseline: Emissions (units)")

    plt.tight_layout()
    plt.show()

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Seaborn styling
sns.set_theme(style="whitegrid")
sns.set_palette(sns.color_palette("husl", 9))

# Given statistics for Grid Efficiency
mean_val = 0.55
std_val = 0.06
min_val = 0.44
max_val = 0.65
p5_val = 0.46       # 5th percentile
median_val = 0.56
ci95_upper = 0.64   # Upper bound of 95% confidence interval

# 1. Generate data from normal distribution
np.random.seed(42)  # for reproducibility
data_raw = np.random.normal(loc=mean_val, scale=std_val, size=100_000)

# 2. Clamp the data between [min_val, max_val]
data = data_raw[(data_raw >= min_val) & (data_raw <= max_val)]

# 3. Create the plot
plt.figure(figsize=(8,5))

# Plot histogram + KDE
sns.histplot(data, kde=True, color="dodgerblue", alpha=0.6)

# 4. Add vertical lines for key statistics
plt.axvline(x=min_val,       color="red",     linestyle="--", label="Min")
plt.axvline(x=p5_val,        color="purple",  linestyle="--", label="5th Percentile")
plt.axvline(x=median_val,    color="green",   linestyle="-.", label="Median")
plt.axvline(x=mean_val,      color="black",   linestyle="-",  label="Mean")
plt.axvline(x=ci95_upper,    color="orange",  linestyle="--", label="95% CI (upper)")
plt.axvline(x=max_val,       color="red",     linestyle="--", label="Max")

# 5. Configure plot labels and legend
plt.title("Grid Efficiency Distribution")
plt.xlabel("Grid Efficiency")
plt.ylabel("Frequency")
plt.legend(loc="upper left")

plt.tight_layout()
plt.show()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

###############################################################################
# 1. Seaborn Theming
###############################################################################
sns.set_theme(style="whitegrid")
sns.set_palette(sns.color_palette("husl", 9))

###############################################################################
# 2. Metrics Data
#
# Format per metric:
# {
#   "name": "Metric Name",
#   "mean": float,
#   "std": float,
#   "min": float,
#   "max": float,
#   "p5": float,
#   "median": float,
#   "ci95": float
# }
###############################################################################
metrics = [
    {
        "name": "Total Population",
        "mean": 220378.64,
        "std": 15880.68,
        "min": 179829.39,
        "max": 260093.13,
        "p5": 194254.92,
        "median": 218960.92,
        "ci95": 253601.07
    },
    {
        "name": "Total Energy (units)",
        "mean": 628486.27,
        "std": 84716.82,
        "min": 496416.39,
        "max": 790214.05,
        "p5": 505010.40,
        "median": 618793.61,
        "ci95": 778121.08
    },
    {
        "name": "Emissions (units)",
        "mean": 1.75,
        "std": 0.31,
        "min": 1.11,
        "max": 2.57,
        "p5": 1.24,
        "median": 1.72,
        "ci95": 2.43
    },
    {
        "name": "Normalized Score",
        "mean": 0.30,
        "std": 0.05,
        "min": 0.20,
        "max": 0.42,
        "p5": 0.22,
        "median": 0.29,
        "ci95": 0.38
    },
    {
        "name": "Index Score",
        "mean": 59.46,
        "std": 2.83,
        "min": 48.39,
        "max": 64.30,
        "p5": 54.80,
        "median": 59.55,
        "ci95": 63.67
    },
    {
        "name": "Share (%)",
        "mean": 44.27,
        "std": 6.41,
        "min": 33.08,
        "max": 56.00,
        "p5": 33.73,
        "median": 44.22,
        "ci95": 55.38
    },
    {
        "name": "Resilience Index",
        "mean": 0.10,
        "std": 0.18,
        "min": 0.00,
        "max": 0.78,
        "p5": -0.20,   # sometimes negative, so interpret carefully
        "median": 0.00,
        "ci95": 0.64
    },
    {
        "name": "Growth Rate (%)",
        "mean": 0.02,
        "std": 0.01,
        "min": 0.00,
        "max": 0.03,
        "p5": 0.00,
        "median": 0.02,
        "ci95": 0.03
    },
    {
        "name": "Health Index",
        "mean": 0.69,
        "std": 0.09,
        "min": 0.42,
        "max": 0.91,
        "p5": 0.54,
        "median": 0.69,
        "ci95": 0.87
    },
    {
        "name": "Cost-Benefit Ratio",
        "mean": -103.22,
        "std": 20.70,
        "min": -157.71,
        "max": -42.50,
        "p5": -137.27,
        "median": -102.69,
        "ci95": -68.41
    },
    {
        "name": "Renewable Energy Jobs",
        "mean": 137.28,
        "std": 20.06,
        "min": 102.25,
        "max": 173.83,
        "p5": 104.28,
        "median": 137.10,
        "ci95": 172.07
    },
    {
        "name": "Infrastructure Jobs",
        "mean": 18.87,
        "std": 35.31,
        "min": 0.00,
        "max": 156.90,
        "p5": -39.21,  # negative 5th percentile suggests data or model distribution
        "median": 0.00,
        "ci95": 115.45
    },
    {
        "name": "General Jobs",
        "mean": 716.96,
        "std": 7.04,
        "min": 700.00,
        "max": 731.88,
        "p5": 705.38,
        "median": 716.83,
        "ci95": 729.03
    }
]

###############################################################################
# 3. Function to Sample and Plot a Single Metric
###############################################################################
def plot_metric_distribution(ax, metric_info, seed=42):
    """
    Given a dictionary of metric stats and an Axes object,
    generate a random sample from normal(mean, std),
    clamp it to [min, max], plot histogram + KDE,
    and add vertical lines for min, p5, median, mean, ci95, and max.
    """
    np.random.seed(seed)

    # Extract needed stats
    m_name = metric_info["name"]
    mean_val = metric_info["mean"]
    std_val  = metric_info["std"]
    min_val  = metric_info["min"]
    max_val  = metric_info["max"]
    p5_val   = metric_info["p5"]
    median_val = metric_info["median"]
    ci95_val = metric_info["ci95"]

    # Generate random data
    data_raw = np.random.normal(loc=mean_val, scale=std_val, size=100_000)

    # Clamp to [min, max]
    data = data_raw[(data_raw >= min_val) & (data_raw <= max_val)]

    # Plot histogram + KDE on the given Axes
    sns.histplot(data, ax=ax, kde=True, color="dodgerblue", alpha=0.6)

    # Add vertical lines
    ax.axvline(x=min_val,    color="red",     linestyle="--", label="Min")
    ax.axvline(x=p5_val,     color="purple",  linestyle="--", label="5th Percentile")
    ax.axvline(x=median_val, color="green",   linestyle="-.", label="Median")
    ax.axvline(x=mean_val,   color="black",   linestyle="-",  label="Mean")
    ax.axvline(x=ci95_val,   color="orange",  linestyle="--", label="95% CI (upper)")
    ax.axvline(x=max_val,    color="red",     linestyle="--", label="Max")

    # Configure Axes
    ax.set_title(m_name)
    ax.set_xlabel("Value")
    ax.set_ylabel("Frequency")
    ax.legend(loc="upper right", fontsize="small")

###############################################################################
# 4. Main: Create Subplots for All Metrics
###############################################################################
if __name__ == "__main__":
    # We'll make subplots with 3 columns.
    # We'll compute how many rows we need:
    n_metrics = len(metrics)
    n_cols = 3
    n_rows = (n_metrics + n_cols - 1) // n_cols  # ceiling division

    fig, axes = plt.subplots(n_rows, n_cols, figsize=(17, 5 * n_rows), squeeze=False)
    axes = axes.flatten()  # easier iteration

    for i, metric_dict in enumerate(metrics):
        plot_metric_distribution(axes[i], metric_dict, seed=42)

    # Hide any extra subplots if we don't have an exact multiple of columns
    for j in range(i+1, n_rows*n_cols):
        axes[j].set_visible(False)

    plt.tight_layout()
    plt.show()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

###############################################################################
# 1. Seaborn Theming per User Request
###############################################################################
sns.set_theme(style="whitegrid")
sns.set_palette(sns.color_palette("husl", 9))

###############################################################################
# 2. Store the Provided Data as a List of Dictionaries
#    Each dictionary has: Scenario, RQ, Metric, Mean, Std, Min, Max, P5, Median, CI95
###############################################################################
data_entries = [
    # SCENARIO 1: Baseline
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Total Population",
        "Mean": 152282.59, "Std": 6859.86,
        "Min": 136848.26, "Max": 175289.08,
        "P5": 140998.12, "Median": 151836.60, "CI95": 139920.44
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Total Energy (units)",
        "Mean": 714041.12, "Std": 43810.10,
        "Min": 629251.38, "Max": 792643.74,
        "P5": 641973.51, "Median": 714469.14, "CI95": 635975.37
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Emissions (units)",
        "Mean": 2.59, "Std": 0.18,
        "Min": 2.18, "Max": 3.03,
        "P5": 2.29, "Median": 2.60, "CI95": 2.26
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Normalized Score",
        "Mean": 0.33, "Std": 0.05,
        "Min": 0.24, "Max": 0.44,
        "P5": 0.24, "Median": 0.33, "CI95": 0.25
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Index Score",
        "Mean": 60.08, "Std": 1.73,
        "Min": 54.64, "Max": 63.39,
        "P5": 57.23, "Median": 60.30, "CI95": 56.01
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Share (%)",
        "Mean": 27.40, "Std": 3.23,
        "Min": 21.51, "Max": 33.00,
        "P5": 22.09, "Median": 27.33, "CI95": 21.77
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Resilience Index",
        "Mean": 0.31, "Std": 0.24,
        "Min": 0.00, "Max": 0.78,
        "P5": -0.08, "Median": 0.32, "CI95": 0.74
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Growth Rate (%)",
        "Mean": 0.01, "Std": 0.00,
        "Min": 0.00, "Max": 0.02,
        "P5": 0.00, "Median": 0.01, "CI95": 0.02
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Health Index",
        "Mean": 0.70, "Std": 0.09,
        "Min": 0.35, "Max": 0.94,
        "P5": 0.55, "Median": 0.69, "CI95": 0.85
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Cost-Benefit Ratio",
        "Mean": -119.82, "Std": 15.91,
        "Min": -154.72, "Max": -83.88,
        "P5": -145.99, "Median": -119.73, "CI95": -89.98
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Renewable Energy Jobs",
        "Mean": 56.32, "Std": 6.75,
        "Min": 44.01, "Max": 67.95,
        "P5": 45.22, "Median": 56.17, "CI95": 67.46
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "Infrastructure Jobs",
        "Mean": 31.05, "Std": 24.33,
        "Min": 0.00, "Max": 79.62,
        "P5": 8.97, "Median": 32.36, "CI95": 75.18
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ1",
        "Metric": "General Jobs",
        "Mean": 510.61, "Std": 4.73,
        "Min": 500.00, "Max": 524.68,
        "P5": 502.83, "Median": 510.41, "CI95": 519.99
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Grid Efficiency",
        "Mean": 0.43, "Std": 0.06,
        "Min": 0.31, "Max": 0.53,
        "P5": 0.33, "Median": 0.43, "CI95": 0.51
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Waste Optimization",
        "Mean": 0.40, "Std": 0.07,
        "Min": 0.24, "Max": 0.53,
        "P5": 0.28, "Median": 0.40, "CI95": 0.51
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Transit Usage",
        "Mean": 0.35, "Std": 0.09,
        "Min": 0.21, "Max": 0.50,
        "P5": 0.20, "Median": 0.34, "CI95": 0.48
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Water Scarcity",
        "Mean": 0.67, "Std": 0.11,
        "Min": 0.40, "Max": 0.92,
        "P5": 0.48, "Median": 0.66, "CI95": 0.86
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Waste Accumulation",
        "Mean": 0.48, "Std": 0.01,
        "Min": 0.47, "Max": 0.49,
        "P5": 0.47, "Median": 0.48, "CI95": 0.49
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Traffic Congestion",
        "Mean": 0.24, "Std": 0.06,
        "Min": 0.12, "Max": 0.40,
        "P5": 0.13, "Median": 0.26, "CI95": 0.35
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Governance Index",
        "Mean": 0.58, "Std": 0.10,
        "Min": 0.38, "Max": 0.81,
        "P5": 0.42, "Median": 0.59, "CI95": 0.75
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Policy Success",
        "Mean": 0.27, "Std": 0.07,
        "Min": 0.15, "Max": 0.41,
        "P5": 0.16, "Median": 0.28, "CI95": 0.37
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "SDG Progress",
        "Mean": 0.09, "Std": 0.05,
        "Min": -0.03, "Max": 0.19,
        "P5": 0.01, "Median": 0.08, "CI95": 0.18
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "CO2 Reduction",
        "Mean": 0.50, "Std": 0.00,
        "Min": 0.50, "Max": 0.51,
        "P5": 0.50, "Median": 0.50, "CI95": 0.51
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Recycling Rate",
        "Mean": 0.17, "Std": 0.06,
        "Min": 0.07, "Max": 0.30,
        "P5": 0.07, "Median": 0.16, "CI95": 0.26
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ2",
        "Metric": "Economic Benefit",
        "Mean": 8.92, "Std": 8.77,
        "Min": -5.15, "Max": 24.23,
        "P5": -5.51, "Median": 8.21, "CI95": 22.31
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ3",
        "Metric": "Data Integration",
        "Mean": 0.11, "Std": 0.15,
        "Min": 0.00, "Max": 0.63,
        "P5": -0.13, "Median": 0.05, "CI95": 0.55
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ3",
        "Metric": "IoT Scalability",
        "Mean": 0.04, "Std": 0.06,
        "Min": 0.00, "Max": 0.20,
        "P5": -0.06, "Median": 0.00, "CI95": 0.20
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ3",
        "Metric": "Data Accuracy",
        "Mean": 0.05, "Std": 0.09,
        "Min": 0.00, "Max": 0.29,
        "P5": -0.09, "Median": 0.00, "CI95": 0.29
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ3",
        "Metric": "Decision Efficiency",
        "Mean": 0.24, "Std": 0.02,
        "Min": 0.21, "Max": 0.27,
        "P5": 0.21, "Median": 0.24, "CI95": 0.27
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ3",
        "Metric": "Cost Benefit",
        "Mean": -2108.42, "Std": 202.33,
        "Min": -2473.06, "Max": -1712.46,
        "P5": -2441.25, "Median": -2121.56, "CI95": -1765.20
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Framework_Performance",
        "Mean": 0.13, "Std": 0.02,
        "Min": 0.10, "Max": 0.16,
        "P5": 0.10, "Median": 0.10, "CI95": 0.13
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Adaptability",
        "Mean": 21.25, "Std": 0.11,
        "Min": 21.01, "Max": 21.43,
        "P5": 21.07, "Median": 21.04, "CI95": 21.24
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Gov_Impact",
        "Mean": 44.43, "Std": 5.77,
        "Min": 34.98, "Max": 53.97,
        "P5": 34.93, "Median": 35.70, "CI95": 44.62
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Sustainability",
        "Mean": 30.60, "Std": 0.07,
        "Min": 30.48, "Max": 30.70,
        "P5": 30.49, "Median": 30.49, "CI95": 30.60
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Econ_Impact",
        "Mean": 0.00, "Std": 0.00,
        "Min": 0.00, "Max": 0.00,
        "P5": 0.00, "Median": 0.00, "CI95": 0.00
    },
    {
        "Scenario": "Baseline",
        "RQ": "RQ4",
        "Metric": "Community_WellBeing",
        "Mean": 40.37, "Std": 0.07,
        "Min": 40.24, "Max": 40.48,
        "P5": 40.25, "Median": 40.00, "CI95": 40.36
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Total Population",
        "Mean": 220378.64, "Std": 15880.68,
        "Min": 179829.39, "Max": 260093.13,
        "P5": 194254.92, "Median": 218960.92, "CI95": 253601.07
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Total Energy (units)",
        "Mean": 628486.27, "Std": 84716.82,
        "Min": 496416.39, "Max": 790214.05,
        "P5": 505010.40, "Median": 618793.61, "CI95": 778121.08
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Emissions (units)",
        "Mean": 1.75, "Std": 0.31,
        "Min": 1.11, "Max": 2.57,
        "P5": 1.24, "Median": 1.72, "CI95": 2.43
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Normalized Score",
        "Mean": 0.30, "Std": 0.05,
        "Min": 0.20, "Max": 0.42,
        "P5": 0.22, "Median": 0.29, "CI95": 0.38
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Index Score",
        "Mean": 59.46, "Std": 2.83,
        "Min": 48.39, "Max": 64.30,
        "P5": 54.80, "Median": 59.55, "CI95": 63.67
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Share (%)",
        "Mean": 44.27, "Std": 6.41,
        "Min": 33.08, "Max": 56.00,
        "P5": 33.73, "Median": 44.22, "CI95": 55.38
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Resilience Index",
        "Mean": 0.10, "Std": 0.18,
        "Min": 0.00, "Max": 0.78,
        "P5": -0.20, "Median": 0.00, "CI95": 0.64
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Growth Rate (%)",
        "Mean": 0.02, "Std": 0.01,
        "Min": 0.00, "Max": 0.03,
        "P5": 0.00, "Median": 0.02, "CI95": 0.03
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Health Index",
        "Mean": 0.69, "Std": 0.09,
        "Min": 0.42, "Max": 0.91,
        "P5": 0.54, "Median": 0.69, "CI95": 0.87
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Cost-Benefit Ratio",
        "Mean": -103.22, "Std": 20.70,
        "Min": -157.71, "Max": -42.50,
        "P5": -137.27, "Median": -102.69, "CI95": -68.41
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Renewable Energy Jobs",
        "Mean": 137.28, "Std": 20.06,
        "Min": 102.25, "Max": 173.83,
        "P5": 104.28, "Median": 137.10, "CI95": 172.07
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "Infrastructure Jobs",
        "Mean": 18.87, "Std": 35.31,
        "Min": 0.00, "Max": 156.90,
        "P5": -39.21, "Median": 0.00, "CI95": 115.45
    },
    {
        "Scenario": "Rapid Urbanization",
        "RQ": "RQ1",
        "Metric": "General Jobs",
        "Mean": 716.96, "Std": 7.04,
        "Min": 700.00, "Max": 731.88,
        "P5": 705.38, "Median": 716.83, "CI95": 729.03
    },
    # SCENARIO 3: Severe Climate Shock
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Total Population",
        "Mean": 135331.76, "Std": 5281.58,
        "Min": 118665.21, "Max": 147708.30,
        "P5": 126643.56, "Median": 134795.26, "CI95": 145311.99
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Total Energy (units)",
        "Mean": 628486.27, "Std": 47611.97,
        "Min": 628828.61, "Max": 792232.87,  # Check min > mean
        "P5": 550164.58, "Median": 702379.67, "CI95": 790127.07
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Emissions (units)",
        "Mean": 2.58, "Std": 0.22,
        "Min": 2.13, "Max": 3.08,
        "P5": 2.22, "Median": 2.57, "CI95": 3.00
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Normalized Score",
        "Mean": 0.46, "Std": 0.09,
        "Min": 0.26, "Max": 0.79,
        "P5": 0.31, "Median": 0.45, "CI95": 0.63
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Index Score",
        "Mean": 50.35, "Std": 5.93,
        "Min": 32.31, "Max": 62.85,
        "P5": 40.60, "Median": 50.54, "CI95": 60.39
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Share (%)",
        "Mean": 26.98, "Std": 0.03,
        "Min": 21.51, "Max": 33.00,
        "P5": 26.93, "Median": 26.84, "CI95": 32.68
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Resilience Index",
        "Mean": 0.10, "Std": 0.09,
        "Min": 0.00, "Max": 0.75,
        "P5": -0.05, "Median": 0.00, "CI95": 0.38
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Growth Rate (%)",
        "Mean": 0.01, "Std": 0.01,
        "Min": 0.00, "Max": 0.03,
        "P5": -0.01, "Median": 0.01, "CI95": 0.02
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Health Index",
        "Mean": 0.66, "Std": 0.10,
        "Min": 0.39, "Max": 1.00,
        "P5": 0.50, "Median": 0.66, "CI95": 0.85
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Cost-Benefit Ratio",
        "Mean": -188.71, "Std": 16.99,
        "Min": -225.71, "Max": -138.63,
        "P5": -216.66, "Median": -189.35, "CI95": -157.08
    },
    {
        "Scenario": "Severe Climate Shock",
        "RQ": "RQ1",
        "Metric": "Jobs",
        "Mean": 69.31, "Std": 8.54,
        "Min": 55.02, "Max": 84.94,
        "P5": 55.26, "Median": 68.94, "CI95": 84.17
    },
    # SCENARIO 4: High Governance
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Grid Efficiency",
        "Mean": 0.55, "Std": 0.06,
        "Min": 0.44, "Max": 0.65,
        "P5": 0.46, "Median": 0.56, "CI95": 0.64
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Waste Optimization",
        "Mean": 0.54, "Std": 0.07,
        "Min": 0.41, "Max": 0.69,
        "P5": 0.43, "Median": 0.53, "CI95": 0.64
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Transit Usage",
        "Mean": 0.45, "Std": 0.09,
        "Min": 0.31, "Max": 0.60,
        "P5": 0.33, "Median": 0.44, "CI95": 0.59
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Water Scarcity",
        "Mean": 0.43, "Std": 0.13,
        "Min": 0.18, "Max": 0.74,
        "P5": 0.24, "Median": 0.42, "CI95": 0.66
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Waste Accumulation",
        "Mean": 0.46, "Std": 0.01,
        "Min": 0.43, "Max": 0.48,
        "P5": 0.44, "Median": 0.46, "CI95": 0.48
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Traffic Congestion",
        "Mean": 0.18, "Std": 0.05,
        "Min": 0.10, "Max": 0.32,
        "P5": 0.11, "Median": 0.00, "CI95": 0.28
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Governance Index",
        "Mean": 0.94, "Std": 0.11,
        "Min": 0.64, "Max": 1.17,
        "P5": 0.77, "Median": 0.94, "CI95": 1.11
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Policy Success",
        "Mean": 0.55, "Std": 0.09,
        "Min": 0.35, "Max": 0.78,
        "P5": 0.39, "Median": 0.55, "CI95": 0.70
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "SDG Progress",
        "Mean": 0.23, "Std": 0.05,
        "Min": 0.11, "Max": 0.34,
        "P5": 0.15, "Median": 0.24, "CI95": 0.30
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "CO2 Reduction",
        "Mean": 0.51, "Std": 0.00,
        "Min": 0.50, "Max": 0.52,
        "P5": 0.51, "Median": 0.51, "CI95": 0.52
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Recycling Rate",
        "Mean": 0.39, "Std": 0.12,
        "Min": 0.17, "Max": 0.65,
        "P5": 0.20, "Median": 0.39, "CI95": 0.57
    },
    {
        "Scenario": "High Governance",
        "RQ": "RQ2",
        "Metric": "Economic Benefit",
        "Mean": 17.97, "Std": 8.49,
        "Min": 3.28, "Max": 34.05,
        "P5": 5.58, "Median": 16.44, "CI95": 32.03
    },
    # SCENARIO 5: Resource Scarcity
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Grid Efficiency",
        "Mean": 0.34, "Std": 0.06,
        "Min": 0.24, "Max": 0.44,
        "P5": 0.25, "Median": 0.34, "CI95": 0.43
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Waste Optimization",
        "Mean": 0.35, "Std": 0.06,
        "Min": 0.24, "Max": 0.46,
        "P5": 0.26, "Median": 0.35, "CI95": 0.45
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Transit Usage",
        "Mean": 0.29, "Std": 0.06,
        "Min": 0.21, "Max": 0.40,
        "P5": 0.21, "Median": 0.28, "CI95": 0.39
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Water Scarcity",
        "Mean": 1.05, "Std": 0.09,
        "Min": 0.86, "Max": 1.22,
        "P5": 0.89, "Median": 1.06, "CI95": 1.20
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Waste Accumulation",
        "Mean": 0.48, "Std": 0.01,
        "Min": 0.46, "Max": 0.49,
        "P5": 0.46, "Median": 0.48, "CI95": 0.49
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Traffic Congestion",
        "Mean": 0.32, "Std": 0.07,
        "Min": 0.19, "Max": 0.46,
        "P5": 0.22, "Median": 0.00, "CI95": 0.44
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Governance Index",
        "Mean": 0.53, "Std": 0.09,
        "Min": 0.33, "Max": 0.72,
        "P5": 0.38, "Median": 0.52, "CI95": 0.69
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Policy Success",
        "Mean": 0.20, "Std": 0.04,
        "Min": 0.11, "Max": 0.30,
        "P5": 0.14, "Median": 0.20, "CI95": 0.28
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "SDG Progress",
        "Mean": -0.08, "Std": 0.05,
        "Min": -0.18, "Max": 0.04,
        "P5": -0.16, "Median": -0.07, "CI95": -0.01
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "CO2 Reduction",
        "Mean": 0.51, "Std": 0.00,
        "Min": 0.50, "Max": 0.51,
        "P5": 0.50, "Median": 0.51, "CI95": 0.51
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Recycling Rate",
        "Mean": 0.13, "Std": 0.04,
        "Min": 0.06, "Max": 0.22,
        "P5": 0.07, "Median": 0.13, "CI95": 0.19
    },
    {
        "Scenario": "Resource Scarcity",
        "RQ": "RQ2",
        "Metric": "Economic Benefit",
        "Mean": 2.98, "Std": 6.09,
        "Min": -5.54, "Max": 14.63,
        "P5": -4.64, "Median": 1.40, "CI95": 12.73
    },
    # SCENARIO 6: High Investment
    {
        "Scenario": "High Investment",
        "RQ": "RQ3",
        "Metric": "Data Integration",
        "Mean": 0.45, "Std": 0.32,
        "Min": 0.00, "Max": 1.00,
        "P5": 0.00, "Median": 0.43, "CI95": 1.00
    },
    {
        "Scenario": "High Investment",
        "RQ": "RQ3",
        "Metric": "IoT Scalability",
        "Mean": 0.09, "Std": 0.08,
        "Min": 0.00, "Max": 0.21,
        "P5": 0.00, "Median": 0.07, "CI95": 0.21
    },
    {
        "Scenario": "High Investment",
        "RQ": "RQ3",
        "Metric": "Data Accuracy",
        "Mean": 0.11, "Std": 0.12,
        "Min": 0.00, "Max": 0.30,
        "P5": 0.00, "Median": 0.07, "CI95": 0.30
    },
    {
        "Scenario": "High Investment",
        "RQ": "RQ3",
        "Metric": "Decision Efficiency",
        "Mean": 0.25, "Std": 0.02,
        "Min": 0.21, "Max": 0.27,
        "P5": 0.21, "Median": 0.25, "CI95": 0.27
    },
    {
        "Scenario": "High Investment",
        "RQ": "RQ3",
        "Metric": "Cost Benefit",
        "Mean": -3978.04, "Std": 411.17,
        "Min": -4795.96, "Max": -3380.61,
        "P5": -4722.92, "Median": -3918.42, "CI95": -3436.98
    },
    # SCENARIO 7: Low Resource
    {
        "Scenario": "Low Resource",
        "RQ": "RQ3",
        "Metric": "Data_Integration",
        "Mean": 0.02, "Std": 0.04,
        "Min": 0.00, "Max": 0.40,
        "P5": 0.00, "Median": 0.01, "CI95": 0.10
    },
    {
        "Scenario": "Low Resource",
        "RQ": "RQ3",
        "Metric": "IoT_Scalability",
        "Mean": 0.01, "Std": 0.03,
        "Min": 0.00, "Max": 0.20,
        "P5": 0.00, "Median": 0.00, "CI95": 0.11
    },
    {
        "Scenario": "Low Resource",
        "RQ": "RQ3",
        "Metric": "Data_Accuracy",
        "Mean": 0.01, "Std": 0.03,
        "Min": 0.00, "Max": 0.28,
        "P5": 0.00, "Median": 0.00, "CI95": 0.14
    },
    {
        "Scenario": "Low Resource",
        "RQ": "RQ3",
        "Metric": "Decision_Efficiency",
        "Mean": 0.22, "Std": 0.01,
        "Min": 0.21, "Max": 0.27,
        "P5": 0.21, "Median": 0.22, "CI95": 0.26
    },
    {
        "Scenario": "Low Resource",
        "RQ": "RQ3",
        "Metric": "Cost_Benefit",
        "Mean": -1655.83, "Std": 129.06,
        "Min": -1838.74, "Max": -1259.02,
        "P5": -1821.76, "Median": -1690.37, "CI95": -1358.00
    },
    # SCENARIO 8: Optimized Resource
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Framework_Performance",
        "Mean": 0.17, "Std": 0.02,
        "Min": 0.13, "Max": 0.20,
        "P5": 0.14, "Median": 0.17, "CI95": 0.20
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Adaptability",
        "Mean": 22.05, "Std": 0.17,
        "Min": 21.72, "Max": 22.44,
        "P5": 21.81, "Median": 22.06, "CI95": 22.40
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Gov_Impact",
        "Mean": 57.59, "Std": 6.65,
        "Min": 46.95, "Max": 67.62,
        "P5": 47.68, "Median": 57.10, "CI95": 67.21
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Sustainability",
        "Mean": 30.73, "Std": 0.07,
        "Min": 30.61, "Max": 30.85,
        "P5": 30.62, "Median": 30.74, "CI95": 30.84
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Econ_Impact",
        "Mean": 2.31, "Std": 0.59,
        "Min": 0.95, "Max": 4.01,
        "P5": 1.17, "Median": 2.25, "CI95": 3.36
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ3",
        "Metric": "Community_WellBeing",
        "Mean": 40.36, "Std": 0.07,
        "Min": 40.25, "Max": 40.48,
        "P5": 40.00, "Median": 40.35, "CI95": 40.48
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Framework_Performance",
        "Mean": 0.17, "Std": 0.02,
        "Min": 0.13, "Max": 0.20,
        "P5": 0.14, "Median": 0.17, "CI95": 0.20
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Adaptability",
        "Mean": 22.05, "Std": 0.17,
        "Min": 21.72, "Max": 22.44,
        "P5": 21.81, "Median": 22.06, "CI95": 22.40
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Gov_Impact",
        "Mean": 57.59, "Std": 6.65,
        "Min": 46.95, "Max": 67.62,
        "P5": 47.68, "Median": 57.10, "CI95": 67.21
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Sustainability",
        "Mean": 30.73, "Std": 0.07,
        "Min": 30.61, "Max": 30.85,
        "P5": 30.62, "Median": 30.74, "CI95": 30.84
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Econ_Impact",
        "Mean": 2.31, "Std": 0.59,
        "Min": 0.95, "Max": 4.01,
        "P5": 1.17, "Median": 2.25, "CI95": 3.36
    },
    {
        "Scenario": "Optimized Resource",
        "RQ": "RQ4",
        "Metric": "Community_WellBeing",
        "Mean": 40.36, "Std": 0.07,
        "Min": 40.25, "Max": 40.48,
        "P5": 40.00, "Median": 40.35, "CI95": 40.48
    },
    # SCENARIO 9: Stress-Test
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Framework_Performance",
        "Mean": 0.13, "Std": 0.02,
        "Min": 0.10, "Max": 0.16,
        "P5": 0.10, "Median": 0.13, "CI95": 0.16
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Adaptability",
        "Mean": 21.23, "Std": 0.15,
        "Min": 20.94, "Max": 21.59,
        "P5": 20.97, "Median": 21.21, "CI95": 21.50
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Gov_Impact",
        "Mean": 46.48, "Std": 6.02,
        "Min": 33.13, "Max": 56.56,
        "P5": 34.81, "Median": 47.22, "CI95": 55.80
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Sustainability",
        "Mean": 30.48, "Std": 0.07,
        "Min": 30.36, "Max": 30.60,
        "P5": 30.36, "Median": 30.48, "CI95": 30.60
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Econ_Impact",
        "Mean": 0.43, "Std": 0.16,
        "Min": 0.18, "Max": 0.76,
        "P5": 0.19, "Median": 0.43, "CI95": 0.75
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ3",
        "Metric": "Community_WellBeing",
        "Mean": 40.24, "Std": 0.07,
        "Min": 40.12, "Max": 40.36,
        "P5": 40.00, "Median": 40.24, "CI95": 40.35
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Framework_Performance",
        "Mean": 0.13, "Std": 0.02,
        "Min": 0.10, "Max": 0.16,
        "P5": 0.10, "Median": 0.13, "CI95": 0.16
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Adaptability",
        "Mean": 21.23, "Std": 0.15,
        "Min": 20.94, "Max": 21.59,
        "P5": 20.97, "Median": 21.21, "CI95": 21.50
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Gov_Impact",
        "Mean": 46.48, "Std": 6.02,
        "Min": 33.13, "Max": 56.56,
        "P5": 34.81, "Median": 47.22, "CI95": 55.80
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Sustainability",
        "Mean": 30.48, "Std": 0.07,
        "Min": 30.36, "Max": 30.60,
        "P5": 30.36, "Median": 30.48, "CI95": 30.60
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Econ_Impact",
        "Mean": 0.43, "Std": 0.16,
        "Min": 0.18, "Max": 0.76,
        "P5": 0.19, "Median": 0.43, "CI95": 0.75
    },
    {
        "Scenario": "Stress-Test",
        "RQ": "RQ4",
        "Metric": "Community_WellBeing",
        "Mean": 40.24, "Std": 0.07,
        "Min": 40.12, "Max": 40.36,
        "P5": 40.00, "Median": 40.24, "CI95": 40.35
    },
    # SCENARIO 10: Community Engagement
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Framework_Performance",
        "Mean": 0.17, "Std": 0.02,
        "Min": 0.13, "Max": 0.20,
        "P5": 0.14, "Median": 0.17, "CI95": 0.20
    },
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Adaptability",
        "Mean": 21.59, "Std": 0.11,
        "Min": 21.36, "Max": 21.82,
        "P5": 21.40, "Median": 21.57, "CI95": 21.79
    },
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Gov_Impact",
        "Mean": 61.82, "Std": 7.56,
        "Min": 50.19, "Max": 75.26,
        "P5": 50.59, "Median": 61.57, "CI95": 75.19
    },
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Sustainability",
        "Mean": 30.61, "Std": 0.07,
        "Min": 30.48, "Max": 30.72,
        "P5": 30.49, "Median": 30.61, "CI95": 30.72
    },
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Econ_Impact",
        "Mean": 0.94, "Std": 0.30,
        "Min": 0.40, "Max": 1.75,
        "P5": 0.46, "Median": 0.91, "CI95": 1.45
    },
    {
        "Scenario": "Community Engagement",
        "RQ": "RQ4",
        "Metric": "Community_WellBeing",
        "Mean": 40.67, "Std": 0.10,
        "Min": 40.48, "Max": 40.84,
        "P5": 41.00, "Median": 40.65, "CI95": 40.83
    }
]

###############################################################################
# 3. Helper for Sampling & Plotting Distribution
###############################################################################
def plot_kde(ax, record, seed=42):
    """
    Plots a histogram + KDE on the given Axes 'ax', for the dictionary 'record'.
    We'll show vertical lines for min, p5, median, mean, ci95, max.
    """
    np.random.seed(seed)

    # Extract stats
    scenario = record["Scenario"]
    rq = record["RQ"]
    metric_name = record["Metric"]

    mean_val = record["Mean"]
    std_val  = record["Std"]
    min_val  = record["Min"]
    max_val  = record["Max"]
    p5_val   = record["P5"]
    median_val = record["Median"]
    ci95_val = record["CI95"]

    # Generate random data from Normal(mean, std)
    samples = np.random.normal(loc=mean_val, scale=std_val, size=100_000)
    # Clamp to [min, max]
    clamped = samples[(samples >= min_val) & (samples <= max_val)]

    # Plot
    sns.histplot(clamped, ax=ax, kde=True, color="dodgerblue", alpha=0.5)

    # Vertical lines
    ax.axvline(x=min_val,    color="red",     linestyle="--", label="Min")
    ax.axvline(x=p5_val,     color="purple",  linestyle="--", label="5%ile")
    ax.axvline(x=median_val, color="green",   linestyle="-.", label="Median")
    ax.axvline(x=mean_val,   color="black",   linestyle="-",  label="Mean")
    ax.axvline(x=ci95_val,   color="orange",  linestyle="--", label="95% CI up")
    ax.axvline(x=max_val,    color="red",     linestyle="--", label="Max")

    # Titles and labels
    ax.set_title(f"{scenario} | {rq}\n{metric_name}", fontsize=10)
    ax.legend(loc="upper right", fontsize=7)
    ax.set_xlabel("Value")
    ax.set_ylabel("Frequency")

###############################################################################
# 4. Main Plotting Logic
###############################################################################
if __name__ == "__main__":
    # We have many rows. Let's create a subplot grid.
    n = len(data_entries)
    n_cols = 3
    n_rows = (n + n_cols - 1) // n_cols  # integer ceiling

    fig, axes = plt.subplots(n_rows, n_cols, figsize=(18, 4 * n_rows))
    axes = axes.flatten()

    for i, record in enumerate(data_entries):
        plot_kde(axes[i], record, seed=42)

    # Hide extra subplots if any
    for j in range(i + 1, n_rows * n_cols):
        axes[j].set_visible(False)

    plt.tight_layout()
    plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. Construct the DataFrame
# ----------------------------------------------------------
# For brevity, this example shows a structure for how you would create the DataFrame.
# In practice, replace the lists below with the complete data from your table.

data = {
    "Scenario": [
        "1. Baseline Scenario", "1. Baseline Scenario", "2. Rapid Urbanization Scenario",
        "2. Rapid Urbanization Scenario", "3. Severe Climate Shock Scenario"
        # ... add all scenario entries ...
    ],
    "RQ": [
        "RQ1", "RQ1", "RQ1",
        "RQ1", "RQ1"
        # ... add the corresponding RQ entries ...
    ],
    "Metric": [
        "Total Population", "Total Energy (units)", "Total Population",
        "Total Energy (units)", "Total Population"
        # ... add the corresponding metric names ...
    ],
    "Mean": [
        152282.59, 714041.12, 220378.64,
        628486.27, 135331.76
        # ... add all Mean values ...
    ]
    # You can add more columns (Std Dev, Min, Max, etc.) as needed.
}

df = pd.DataFrame(data)

# 2. Create a Catplot (FacetGrid bar chart)
# ----------------------------------------------------------
sns.set_style("whitegrid")

# Set the palette to husl with enough distinct colors for your number of scenarios.
# You have 10 scenarios total, so we can request 10 distinct colors.
palette = sns.color_palette("husl", 10)

# Create the facet bar chart
g = sns.catplot(
    data=df,
    x="Metric",
    y="Mean",
    hue="Scenario",
    col="RQ",
    kind="bar",
    col_wrap=2,        # Adjust depending on how many RQs you have
    palette=palette,
    height=4,
    aspect=1.4,
    ci=None            # Turn off default Seaborn confidence intervals,
                       # or adapt if you want to use them
)

# Rotate x-axis labels for readability
g.set_xticklabels(rotation=90)

# Adjust layout
plt.tight_layout()
plt.show()

import graphviz

# Create a new directed graph
flowchart = graphviz.Digraph(format="png", name="ArithmeticOperationsFlowchart")

# Add nodes to the graph
flowchart.node("Start", "Start", shape="ellipse")
flowchart.node("Input1", "Enter the first number", shape="parallelogram")
flowchart.node("Input2", "Enter the second number", shape="parallelogram")
flowchart.node("Addition", "Calculate addition\naddition = number1 + number2", shape="rectangle")
flowchart.node("Subtraction", "Calculate subtraction\nsubtraction = number1 - number2", shape="rectangle")
flowchart.node("Multiplication", "Calculate multiplication\nmultiplication = number1 * number2", shape="rectangle")
flowchart.node("Division", "Calculate division\n(Note: number2 ≠ 0)\ndivision = number1 / number2", shape="rectangle")
flowchart.node("End", "End", shape="ellipse")

# Add edges to represent the flow
flowchart.edges([
    ("Start", "Input1"),
    ("Input1", "Input2"),
    ("Input2", "Addition"),
    ("Addition", "Subtraction"),
    ("Subtraction", "Multiplication"),
    ("Multiplication", "Division"),
    ("Division", "End")
])

# Render the flowchart
#output_path = "/mnt/data/ArithmeticOperationsFlowchart"
flowchart.render(output_path, view=True)

output_path_with_extension = output_path + ".png"
output_path_with_extension

# Correcting the edge connections and regenerating the flowchart

# Create a new directed graph
dot = Digraph("Stage1_Theoretical_Foundations", format="png")

# Start Node
dot.node("Start", "Start", shape="oval")

# Preparation Node
dot.node("Preparation", "Establish Theoretical Foundations", shape="hexagon")

# Process Nodes for Key Framework Components
dot.node("SmartGrowth", "Smart Growth Principles", shape="rectangle")
dot.node("Resilience", "Urban Resilience Theory", shape="rectangle")
dot.node("Governance", "Smart City Governance", shape="rectangle")
dot.node("SystemsThinking", "Systems Thinking & AI Interoperability", shape="rectangle")
dot.node("EnvironmentalJustice", "Environmental Justice & AI Inclusion", shape="rectangle")

# Decision Nodes
dot.node("Decision1", "Policy Integration Feasibility?", shape="diamond")
dot.node("Decision2", "AI Governance Reform Needed?", shape="diamond")

# Database Node
dot.node("Database", "Case Studies (Dubai, London, Baghdad, Sana’a)", shape="cylinder")

# Manual Input Node
dot.node("ManualInput", "Urban Planners Adjust Policies", shape="trapezium")

# Merge Node
dot.node("Merge", "Integrated AI-driven Framework", shape="triangle")

# Alternate Process Node
dot.node("AltProcess", "Alternative AI Implementation Strategies", shape="rect", style="rounded")

# Document Nodes
dot.node("Document1", "Theoretical Research", shape="parallelogram")
dot.node("MultiDocument", "AI Urban Policy Documents", shape="parallelogram")

# Delay Node
dot.node("Delay", "Infrastructure & Policy Delays", shape="parallelogram")

# On-Page Reference Nodes
dot.node("OnPage1", "Urban System Coordination", shape="circle")
dot.node("OnPage2", "AI Data Optimization", shape="circle")

# Off-Page Reference Node (Links to Next Framework Stage)
dot.node("OffPage", "Sector-Specific Adaptations", shape="pentagon")

# Connecting Nodes
dot.edge("Start", "Preparation")
dot.edge("Preparation", "SmartGrowth")
dot.edge("Preparation", "Resilience")
dot.edge("Preparation", "Governance")
dot.edge("Preparation", "SystemsThinking")
dot.edge("Preparation", "EnvironmentalJustice")

dot.edge("SmartGrowth", "Decision1")
dot.edge("Resilience", "Database")
dot.edge("Governance", "Decision2")
dot.edge("SystemsThinking", "OnPage1")
dot.edge("EnvironmentalJustice", "ManualInput")

dot.edge("Decision1", "SmartGrowth", label="Yes")
dot.edge("Decision1", "AltProcess", label="No")
dot.edge("Decision2", "Governance", label="Yes")
dot.edge("Decision2", "AltProcess", label="No")

dot.edge("Database", "MultiDocument")
dot.edge("ManualInput", "Merge")
dot.edge("MultiDocument", "OnPage2")
dot.edge("OnPage2", "Merge")

dot.edge("Merge", "OffPage")

# Save and render the flowchart
flowchart_path = "/mnt/data/Stage1_Theoretical_Foundations.png"
dot.render(flowchart_path, format="png", cleanup=True)

# Provide download link
flowchart_path

import matplotlib.pyplot as plt
import numpy as np

# Defining scenarios and their corresponding data points
scenarios = [
    "Baseline", "Rapid Urbanization", "Severe Climate Shock",
    "High Governance", "Resource Scarcity", "High Investment",
    "Optimized Resources", "Community Engagement"
]

# Key metrics for each scenario
energy_use = [714041, 680000, 792233, 650000, 700000, 720000, 690000, 675000]
co2_emissions = [2.59, 1.75, 3.20, 1.50, 2.70, 2.10, 1.90, 1.85]
grid_efficiency = [0.43, 0.48, 0.30, 0.55, 0.34, 0.50, 0.52, 0.47]
waste_optimization = [0.40, 0.45, 0.28, 0.54, 0.32, 0.49, 0.50, 0.46]
sdg_progress = [0.09, 0.15, 0.05, 0.23, 0.12, 0.18, 0.20, 0.17]
governance_impact = [10, 20, 5, 17.97, 7, 15, 57.59, 61.82]
social_wellbeing = [15, 22, 8, 19, 10, 18, 30.73, 40.67]

x = np.arange(len(scenarios))  # Label locations
width = 0.12  # Bar width

# Creating figure and axes
fig, ax = plt.subplots(figsize=(12, 6))

# Plotting bars for different metrics
ax.bar(x - 3*width, energy_use, width, label='Energy Use', alpha=0.8)
ax.bar(x - 2*width, co2_emissions, width, label='CO2 Emissions', alpha=0.8)
ax.bar(x - width, grid_efficiency, width, label='Grid Efficiency', alpha=0.8)
ax.bar(x, waste_optimization, width, label='Waste Optimization', alpha=0.8)
ax.bar(x + width, sdg_progress, width, label='SDG Progress', alpha=0.8)
ax.bar(x + 2*width, governance_impact, width, label='Governance Impact', alpha=0.8)
ax.bar(x + 3*width, social_wellbeing, width, label='Social Wellbeing', alpha=0.8)

# Setting labels and title
ax.set_xlabel("Scenarios")
ax.set_ylabel("Values")
ax.set_title("Comparison of Key Urban Sustainability Metrics Across Scenarios")
ax.set_xticks(x)
ax.set_xticklabels(scenarios, rotation=20)
ax.legend()

# Display the chart
plt.tight_layout()
plt.show()